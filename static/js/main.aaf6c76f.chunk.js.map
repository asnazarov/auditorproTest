{"version":3,"sources":["App.jsx","index.js"],"names":["App","useState","items","setItems","setValueInp","type","onChange","e","file","Promise","resolve","reject","fileReader","FileReader","readAsArrayBuffer","onload","bufferArray","target","result","wb","XLSX","wsname","SheetNames","ws","Sheets","data","sheet_to_json","onerror","error","then","d","readExcel","files","map","obj","index","value","onClick","fruit","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OAuDeA,EApDH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEgBF,mBAAS,IAFzB,mBAECG,GAFD,WA0BhB,OACE,gCACE,uBAAOC,KAAK,OAAOC,SAAU,SAACC,IAxBhB,SAACC,GACD,IAAIC,SAAQ,SAACC,EAASC,GACpC,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,kBAAkBN,GAC7BI,EAAWG,OAAS,SAACR,GACnB,IAAMS,EAAcT,EAAEU,OAAOC,OACvBC,EAAKC,OAAUJ,EAAa,CAACX,KAAM,WACnCgB,EAASF,EAAGG,WAAW,GACvBC,EAAKJ,EAAGK,OAAOH,GACfI,EAAOL,QAAWM,cAAcH,GACtCb,EAAQe,IAGVb,EAAWe,QAAU,SAACC,GACpBjB,EAAOiB,OAGHC,MAAK,SAACC,GACZ3B,EAAS2B,MAQPC,CADaxB,EAAEU,OAAOe,MAAM,OAG9B,6BAEI9B,EAAM+B,KAAI,SAACC,EAAKC,GAAN,OACR,6BACE,uBACE7B,SAAU,SAAAC,GAAC,OAAIH,EAAYG,EAAEU,OAAOmB,QACpCC,QAAS,SAAC9B,GAAD,OAAOA,EAAEU,OAAOmB,QAAUF,EAAII,OAASlC,EAAY8B,EAAII,QAChEF,MAAOF,EAAII,MACXjC,KAAK,QACA8B,cCvCrBI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.aaf6c76f.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport *as XLSX from 'xlsx';\n\nconst App = () => {\n  const [items, setItems] = useState([])\n  const [valueInp, setValueInp] = useState('')\n\n  const readExcel = (file) => {\n    const promise = new Promise((resolve, reject) => {\n      const fileReader = new FileReader();\n      fileReader.readAsArrayBuffer(file);\n      fileReader.onload = (e) => {\n        const bufferArray = e.target.result;\n        const wb = XLSX.read(bufferArray, {type: 'buffer'});\n        const wsname = wb.SheetNames[0]\n        const ws = wb.Sheets[wsname];\n        const data = XLSX.utils.sheet_to_json(ws);\n        resolve(data)\n      };\n\n      fileReader.onerror = (error) => {\n        reject(error)\n      };\n    });\n    promise.then((d) => {\n      setItems(d)\n    })\n  };\n\n  return (\n    <div>\n      <input type=\"file\" onChange={(e) => {\n        const file = e.target.files[0];\n        readExcel(file)\n      }}/>\n      <ul>\n        {\n          items.map((obj, index) =>\n            <li>\n              <input\n                onChange={e => setValueInp(e.target.value)}\n                onClick={(e) => e.target.value === obj.fruit && setValueInp(obj.fruit)}\n                value={obj.fruit}\n                type=\"text\"\n                key={index}\n              />\n            </li>\n          )\n        }\n      </ul>\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}